{"categories":[{"title":"syntax","uri":"/categories/syntax/"},{"title":"themes","uri":"/categories/themes/"},{"title":"tutorial","uri":"/categories/tutorial/"}],"posts":[{"content":"Hướng dẫn tạo ứng dụng quizApp bằng javascrip Đầu tiên ta cần một dữ liệu mẫu với cấu trúc như sau\nconst quizData = [\r{\rquestion: \u0026quot;Which language runs in a web browser?\u0026quot;,\ra: \u0026quot;Java\u0026quot;,\rb: \u0026quot;C\u0026quot;,\rc: \u0026quot;Python\u0026quot;,\rd: \u0026quot;JavaScript\u0026quot;,\rcorrect: \u0026quot;d\u0026quot;,\r},\r{\rquestion: \u0026quot;What does CSS stand for?\u0026quot;,\ra: \u0026quot;Central Style Sheets\u0026quot;,\rb: \u0026quot;Cascading Style Sheets\u0026quot;,\rc: \u0026quot;Cascading Simple Sheets\u0026quot;,\rd: \u0026quot;Cars SUVs Sailboats\u0026quot;,\rcorrect: \u0026quot;b\u0026quot;,\r},\r{\rquestion: \u0026quot;What does HTML stand for?\u0026quot;,\ra: \u0026quot;Hypertext Markup Language\u0026quot;,\rb: \u0026quot;Hypertext Markdown Language\u0026quot;,\rc: \u0026quot;Hyperloop Machine Language\u0026quot;,\rd: \u0026quot;Helicopters Terminals Motorboats Lamborginis\u0026quot;,\rcorrect: \u0026quot;a\u0026quot;,\r},\r{\rquestion: \u0026quot;What year was JavaScript launched?\u0026quot;,\ra: \u0026quot;1996\u0026quot;,\rb: \u0026quot;1995\u0026quot;,\rc: \u0026quot;1994\u0026quot;,\rd: \u0026quot;none of the above\u0026quot;,\rcorrect: \u0026quot;b\u0026quot;,\r},\r];\rTiếp theo ta sẽ lấy dữ liệu của từng bài quiz rồi hiển thị chúng lên màn hình\nlet currentQuiz = 0;\rloadQuiz();\rfunction loadQuiz() {\rdeselectAnswers();\rconst currentQuizData = quizData[currentQuiz];\rquestionEl.innerText = currentQuizData.question;\ra_text.innerText = currentQuizData.a;\rb_text.innerText = currentQuizData.b;\rc_text.innerText = currentQuizData.c;\rd_text.innerText = currentQuizData.d;\r}\rviệc tiếp theo ta sẽ lắng nghe sự kiện khi người dùng click vào một đáp án rồi kiểm tra xem đáp án đó có chính xác hay không\nfunction getSelected() {\rlet answer;\ranswerEls.forEach((answerEl) =\u0026gt; {\rif (answerEl.checked) {\ranswer = answerEl.id;\r}\r});\rreturn answer;\r}\rsubmitBtn.addEventListener(\u0026quot;click\u0026quot;, () =\u0026gt; {\rconst answer = getSelected();\rif (answer) {\rif (answer === quizData[currentQuiz].correct) {\rscore++;\r}\rcurrentQuiz++;\rif (currentQuiz \u0026lt; quizData.length) {\rloadQuiz();\r} else {\rquiz.innerHTML = `\r\u0026lt;h2\u0026gt;You answered ${score}/${quizData.length} questions correctly\u0026lt;/h2\u0026gt;\r\u0026lt;button onclick=\u0026quot;location.reload()\u0026quot;\u0026gt;Reload\u0026lt;/button\u0026gt;\r`;\r}\r}\r});\rnếu người dùng click chọn đáp án đúng thì tăng câu trả lời đúng lên 1 và chuyển sang câu tiếp theo\nsau khi chuyển sang câu tiếp theo thì loadQuiz() sẽ được chạy để hiển thị câu hỏi tiếp theo lên màn hình rồi sau đó\n","id":0,"section":"posts","summary":"Hướng dẫn tạo ứng dụng quizApp bằng javascrip Đầu tiên ta cần một dữ liệu mẫu với cấu trúc như sau\nconst quizData = [\r{\rquestion: \u0026quot;Which language runs in a web browser?\u0026quot;,\ra: \u0026quot;Java\u0026quot;,\rb: \u0026quot;C\u0026quot;,\rc: \u0026quot;Python\u0026quot;,\rd: \u0026quot;JavaScript\u0026quot;,\rcorrect: \u0026quot;d\u0026quot;,\r},\r{\rquestion: \u0026quot;What does CSS stand for?\u0026quot;,\ra: \u0026quot;Central Style Sheets\u0026quot;,\rb: \u0026quot;Cascading Style Sheets\u0026quot;,\rc: \u0026quot;Cascading Simple Sheets\u0026quot;,\rd: \u0026quot;Cars SUVs Sailboats\u0026quot;,\rcorrect: \u0026quot;b\u0026quot;,\r},\r{\rquestion: \u0026quot;What does HTML stand for?","tags":["html","css","javascript"],"title":"Hướng dẫn tạo ứng dụng quizApp","uri":"/quizapp/10/2022/","year":"2022"},{"content":"Hướng dẫn tạo ứng dụng TodoList với javascript Ứng dụng TodoList là ứng dụng cơ bản nhất để giúp các lập trình viên mới bắt đầu làm quen với những dòng code nhạt nhẽo trở nên thú vị. Sau đây chúng ta sẽ đi tìm hiểu ngay bây giờ.\nhtml Đầu tiên chúng ta sẽ tạo file .html với đoạn code sau\n\u0026lt;form id=\u0026quot;form\u0026quot;\u0026gt;\r\u0026lt;input\rtype=\u0026quot;text\u0026quot;\rclass=\u0026quot;input\u0026quot;\rid=\u0026quot;input\u0026quot;\rplaceholder=\u0026quot;Enter your todo\u0026quot;\rautocomplete=\u0026quot;off\u0026quot;\r/\u0026gt;\r\u0026lt;ul class=\u0026quot;todos\u0026quot; id=\u0026quot;todos\u0026quot;\u0026gt;\u0026lt;/ul\u0026gt;\r\u0026lt;/form\u0026gt;\rTrong đó \u0026lt;form ...\u0026gt;\u0026lt;/form\u0026gt; được gọi là thẻ html Mỗi một thẻ sẽ mang một ý nghĩa và được sử dụng với mục đích khác nhau\nĐoạn code trên ta có 3 thẻ với:\nThẻ form dùng để: chứa những thẻ với mục đích nhập liệu từ người dùng\nThẻ input dùng để: cho người dùng nhập liệu từ bàn phím\nThẻ ul dùng để: hiển thị danh sách nội dung\ncss Tiếp theo chúng ta sẽ style cho chúng hay là làm đẹp lại giao diện vì mặc định những thẻ này khi hiển thị trên trình duyệt chúng rất là xấu\nform {\rbox-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);\rmax-width: 100%;\rwidth: 400px;\r}\r.input {\rborder: none;\rcolor: #444;\rfont-size: 2rem;\rpadding: 1rem 2rem;\rdisplay: block;\rwidth: 100%;\r}\r.input::placeholder {\rcolor: #d5d5d5;\r}\r.input:focus {\routline-color: rgb(179, 131, 226);\r}\rchúng ta sẽ tìm hiểu các thuộc tính css trong bài sau\njavascript và phần cuối cùng là để cho chúng có thể làm đúng mọi nhiệm vụ của mình thì chúng ta sẽ tại file .js để xử lý chúng.\nĐầu tiên chúng ta sẽ phải chọn được nó trong file js (hay có nghĩa là tham chiếu đến chúng trong dom)\nconst form = document.getElementById('form')\rconst input = document.getElementById('input')\rconst todosUL = document.getElementById('todos')\rchúng ta sẽ tạo 1 function để xửa lý khi người dùng thêm nội dung todo function này sẽ có tác dụng là thêm dữ liệu vào danh sách (ul)\nfunction addTodo(todo) {\r// lấy dữ liệu trong ô input mà người dùng vừa nhập let todoText = input.value;\r// kiểm tra xem có tham số truyền vào hay không if (todo) {\rtodoText = todo.text;\r}\r// kiểm tra gía trị if (todoText) {\rconst todoEl = document.createElement(\u0026quot;li\u0026quot;);\rif (todo \u0026amp;\u0026amp; todo.completed) {\rtodoEl.classList.add(\u0026quot;completed\u0026quot;);\r}\rtodoEl.innerText = todoText;\rtodoEl.addEventListener(\u0026quot;click\u0026quot;, () =\u0026gt; {\rtodoEl.classList.toggle(\u0026quot;completed\u0026quot;);\r// cập nhật vào danh sách\rupdateLS();\r});\rtodoEl.addEventListener(\u0026quot;contextmenu\u0026quot;, (e) =\u0026gt; {\re.preventDefault();\rtodoEl.remove();\rupdateLS();\r});\rtodosUL.appendChild(todoEl);\rinput.value = \u0026quot;\u0026quot;;\rupdateLS();\r}\r}\rở đây ta có thêm một hàm updateLS để cập nhật vào danh sách\nfunction updateLS() {\rtodosEl = document.querySelectorAll('li')\rconst todos = []\rtodosEl.forEach(todoEl =\u0026gt; {\rtodos.push({\rtext: todoEl.innerText,\rcompleted: todoEl.classList.contains('completed')\r})\r})\rlocalStorage.setItem('todos', JSON.stringify(todos))\r}\rkhi cập nhật danh sách đồng thời ta cập nhật luôn vào localStronge\nTham khảo các khóa học nhiều hơn tại đây\n","id":1,"section":"posts","summary":"Hướng dẫn tạo ứng dụng TodoList với javascript Ứng dụng TodoList là ứng dụng cơ bản nhất để giúp các lập trình viên mới bắt đầu làm quen với những dòng code nhạt nhẽo trở nên thú vị. Sau đây chúng ta sẽ đi tìm hiểu ngay bây giờ.\nhtml Đầu tiên chúng ta sẽ tạo file .html với đoạn code sau\n\u0026lt;form id=\u0026quot;form\u0026quot;\u0026gt;\r\u0026lt;input\rtype=\u0026quot;text\u0026quot;\rclass=\u0026quot;input\u0026quot;\rid=\u0026quot;input\u0026quot;\rplaceholder=\u0026quot;Enter your todo\u0026quot;\rautocomplete=\u0026quot;off\u0026quot;\r/\u0026gt;\r\u0026lt;ul class=\u0026quot;todos\u0026quot; id=\u0026quot;todos\u0026quot;\u0026gt;\u0026lt;/ul\u0026gt;\r\u0026lt;/form\u0026gt;\rTrong đó \u0026lt;form .","tags":["html","css","javascript"],"title":"Hướng dẫn tạo ứng dụng TodoList với javasript","uri":"/todolist/10/2022/","year":"2022"},{"content":"This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\nHeadings The following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1 H2 H3 H4 H5 H6 Paragraph Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\nBlockquotes The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\nBlockquote without attribution Tiam, ad mint andaepu dandae nostion secatur sequo quae. Note that you can use Markdown syntax within a blockquote.\nBlockquote with attribution Don\u0026rsquo;t communicate by sharing memory, share memory by communicating. — Rob Pike1\nTables Tables aren\u0026rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.\nName Age Bob 27 Alice 23 Inline Markdown within tables Inline Markdown In Table italics bold strikethrough code Code Blocks Code block with backticks html\r\u0026lt;!DOCTYPE html\u0026gt;\r\u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt;\r\u0026lt;head\u0026gt;\r\u0026lt;meta charset=\u0026quot;UTF-8\u0026quot;\u0026gt;\r\u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt;\r\u0026lt;/head\u0026gt;\r\u0026lt;body\u0026gt;\r\u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt;\r\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt;\rCode block indented with four spaces \u0026lt;!DOCTYPE html\u0026gt;\r\u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt;\r\u0026lt;head\u0026gt;\r\u0026lt;meta charset=\u0026quot;UTF-8\u0026quot;\u0026gt;\r\u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt;\r\u0026lt;/head\u0026gt;\r\u0026lt;body\u0026gt;\r\u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt;\r\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt;\rCode block with Hugo\u0026rsquo;s internal highlight shortcode \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; List Types Ordered List First item Second item Third item Unordered List List item Another item And another item Nested list Item First Sub-item Second Sub-item Other Elements — abbr, sub, sup, kbd, mark GIF is a bitmap image format.\nH2O\nXn + Yn = Zn\nPress CTRL+ALT+Delete to end the session.\nMost salamanders are nocturnal, and hunt for insects, worms, and other small creatures.\nThe above quote is excerpted from Rob Pike\u0026rsquo;s talk during Gopherfest, November 18, 2015.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","id":2,"section":"posts","summary":"\u003cp\u003eThis article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\u003c/p\u003e","tags":["markdown","css","html","themes"],"title":"Markdown Syntax Guide","uri":"/markdown-syntax/03/2019/","year":"2019"},{"content":"Lorem est tota propiore conpellat pectoribus de pectora summo.\nRedit teque digerit hominumque toris verebor lumina non cervice subde tollit usus habet Arctonque, furores quas nec ferunt. Quoque montibus nunc caluere tempus inhospita parcite confusaque translucet patri vestro qui optatis lumine cognoscere flos nubis! Fronde ipsamque patulos Dryopen deorum.\nExierant elisi ambit vivere dedere Duce pollice Eris modo Spargitque ferrea quos palude Rursus nulli murmur; hastile inridet ut ab gravi sententia! Nomine potitus silentia flumen, sustinet placuit petis in dilapsa erat sunt. Atria tractus malis.\nComas hunc haec pietate fetum procerum dixit Post torum vates letum Tiresia Flumen querellas Arcanaque montibus omnes Quidem et Vagus elidunt The Van de Graaf Canon\nMane refeci capiebant unda mulcebat Victa caducifer, malo vulnere contra dicere aurato, ludit regale, voca! Retorsit colit est profanae esse virescere furit nec; iaculi matertera et visa est, viribus. Divesque creatis, tecta novat collumque vulnus est, parvas. Faces illo pepulere tempus adest. Tendit flamma, ab opes virum sustinet, sidus sequendo urbis.\nIubar proles corpore raptos vero auctor imperium; sed et huic: manus caeli Lelegas tu lux. Verbis obstitit intus oblectamina fixis linguisque ausus sperare Echionides cornuaque tenent clausit possit. Omnia putatur. Praeteritae refert ausus; ferebant e primus lora nutat, vici quae mea ipse. Et iter nil spectatae vulnus haerentia iuste et exercebat, sui et.\nEurytus Hector, materna ipsumque ut Politen, nec, nate, ignari, vernum cohaesit sequitur. Vel mitis temploque vocatus, inque alis, oculos nomen non silvis corpore coniunx ne displicet illa. Crescunt non unus, vidit visa quantum inmiti flumina mortis facto sic: undique a alios vincula sunt iactata abdita! Suspenderat ego fuit tendit: luna, ante urbem Propoetides parte.\n","id":3,"section":"posts","summary":"\u003cp\u003eLorem est tota propiore conpellat pectoribus de\npectora summo.\u003c/p\u003e","tags":["markdown","text"],"title":"Placeholder Text","uri":"/placeholder-text/03/2019/","year":"2019"},{"content":"Emoji can be enabled in a Hugo project in a number of ways.\nThe emojify function can be called directly in templates or Inline Shortcodes.\nTo enable emoji globally, set enableEmoji to true in your site’s configuration and then you can type emoji shorthand codes directly in content files; e.g.\nThe Emoji cheat sheet is a useful reference for emoji shorthand codes.\nN.B. The above steps enable Unicode Standard emoji characters and sequences in Hugo, however the rendering of these glyphs depends on the browser and the platform. To style the emoji you can either use a third party emoji font or a font stack; e.g.\n.emoji { font-family: Apple Color Emoji,Segoe UI Emoji,NotoColorEmoji,Segoe UI Symbol,Android Emoji,EmojiSymbols; }","id":4,"section":"posts","summary":"\u003cp\u003eEmoji can be enabled in a Hugo project in a number of ways.\u003c/p\u003e","tags":["emoji"],"title":"Emoji Support","uri":"/emoji-support/03/2019/","year":"2019"}],"tags":[{"title":"css","uri":"/tags/css/"},{"title":"emoji","uri":"/tags/emoji/"},{"title":"html","uri":"/tags/html/"},{"title":"index","uri":"/tags/index/"},{"title":"javascript","uri":"/tags/javascript/"},{"title":"markdown","uri":"/tags/markdown/"},{"title":"text","uri":"/tags/text/"},{"title":"themes","uri":"/tags/themes/"}]}